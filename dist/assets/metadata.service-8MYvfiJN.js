var y=Object.defineProperty;var h=(d,e,a)=>e in d?y(d,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):d[e]=a;var m=(d,e,a)=>h(d,typeof e!="symbol"?e+"":e,a);import{d as l}from"./index-CNHkD-Ra.js";class u{constructor(){m(this,"globalSyncTime",null);m(this,"metadataCache",new Map);m(this,"cacheExpiry",null);m(this,"CACHE_DURATION",5e3);this.loadGlobalSyncTime(),this.performInitialCleanup()}performInitialCleanup(){try{if(console.log("[DEBUG] MetadataService - performing initial cleanup"),this.clearCache(),this.globalSyncTime){const e=new Date;(Math.abs(e.getTime()-this.globalSyncTime.getTime())>365*24*60*60*1e3||this.globalSyncTime>e)&&(console.log("[DEBUG] MetadataService - clearing invalid globalSyncTime:",this.globalSyncTime),localStorage.removeItem("globalSyncTime"),this.globalSyncTime=null)}console.log("[DEBUG] MetadataService - initial cleanup completed")}catch(e){console.warn("[DEBUG] MetadataService - initial cleanup failed:",e)}}createDefaultMetadata(){return{isNew:!0,isModified:!1,isDeleted:!1,isSynced:!1,lastModified:new Date,lastSyncTime:null,version:1}}markAsModified(e){return{...e,isModified:!0,isSynced:!1,lastModified:new Date,version:e.version+1}}markAsDeleted(e){return{...e,isDeleted:!0,isSynced:!1,lastModified:new Date,version:e.version+1}}markAsSynced(e){const a=new Date;return{...e,isNew:!1,isModified:!1,isDeleted:!1,isSynced:!0,lastSyncTime:a,lastModified:a}}isUnsyncedData(e){return e.isDeleted&&!e.isSynced||e.isNew&&!e.isSynced||e.isModified&&!e.isSynced?!0:e.isSynced&&e.lastSyncTime?!1:e.lastSyncTime?!!(this.globalSyncTime&&e.lastModified>this.globalSyncTime):!(this.globalSyncTime&&e.lastModified<=this.globalSyncTime)}getActionType(e){return e.isDeleted?"deleted":e.isNew?"created":"updated"}setGlobalSyncTime(e){this.globalSyncTime=e,localStorage.setItem("globalSyncTime",e.toISOString()),this.clearCache()}loadGlobalSyncTime(){const e=localStorage.getItem("globalSyncTime");e&&(this.globalSyncTime=new Date(e))}clearCache(){this.metadataCache.clear(),this.cacheExpiry=null}clearMetadataCache(){this.clearCache()}getItemMetadata(e,a){const s=`${e}_${a}`;return this.metadataCache.get(s)||null}isCacheValid(){return this.cacheExpiry!==null&&Date.now()<this.cacheExpiry}async getUnsyncedDataCount(){if(this.isCacheValid())return this.getCachedCount();const e=await l.holdings.toArray(),a=await l.locations.toArray(),s=await l.tokens.toArray();let c=0,t=0,i=0;for(const n of e){const r=this.getOrCreateMetadata(n,"holding");this.isUnsyncedData(r)&&c++}for(const n of a){const r=this.getOrCreateMetadata(n,"location");this.isUnsyncedData(r)&&t++}for(const n of s){const r=this.getOrCreateMetadata(n,"token");this.isUnsyncedData(r)&&i++}const o={holdings:c,locations:t,tokens:i,total:c+t+i};return this.cacheResult(o),o}async getUnsyncedDataDetails(){var t,i;const e=[],a=await l.holdings.toArray(),s=await l.locations.toArray(),c=await l.tokens.toArray();for(const o of a){const n=this.getOrCreateMetadata(o,"holding");this.isUnsyncedData(n)&&e.push({type:"holding",id:((t=o.id)==null?void 0:t.toString())||"unknown",name:`${o.symbol} (${o.quantity})`,action:this.getActionType(n),lastModified:n.lastModified})}for(const o of s){const n=this.getOrCreateMetadata(o,"location");this.isUnsyncedData(n)&&e.push({type:"location",id:o.id.toString(),name:o.name,action:this.getActionType(n),lastModified:n.lastModified})}for(const o of c){const n=this.getOrCreateMetadata(o,"token");this.isUnsyncedData(n)&&e.push({type:"token",id:((i=o.id)==null?void 0:i.toString())||"unknown",name:`${o.name} (${o.symbol})`,action:this.getActionType(n),lastModified:n.lastModified})}return e.sort((o,n)=>n.lastModified.getTime()-o.lastModified.getTime())}getOrCreateMetadata(e,a){const s=`${a}_${e.id||e.symbol||"new"}`,c=this.metadataCache.get(s);if(c)return c;if(e.metadata){const i={...e.metadata,lastModified:new Date(e.metadata.lastModified),lastSyncTime:e.metadata.lastSyncTime?new Date(e.metadata.lastSyncTime):null};return this.metadataCache.set(s,i),i}const t=this.createDefaultMetadata();if(this.globalSyncTime){const i=e.createdAt||e.updatedAt||0;i>0&&i<=this.globalSyncTime.getTime()?(t.isNew=!1,t.isSynced=!0,t.lastSyncTime=this.globalSyncTime,t.lastModified=new Date(i)):(t.isNew=!0,t.isSynced=!1,t.lastSyncTime=null,t.lastModified=new Date(i||Date.now()))}else t.isNew=!1,t.isSynced=!0,t.lastSyncTime=new Date,t.lastModified=new Date(e.createdAt||e.updatedAt||Date.now());return this.metadataCache.set(s,t),t}cacheResult(e){this.metadataCache.set("cached_count",e),this.cacheExpiry=Date.now()+this.CACHE_DURATION}getCachedCount(){return this.metadataCache.get("cached_count")||{holdings:0,locations:0,tokens:0,total:0}}async updateCacheForItem(e,a,s){const c=`${e}_${a}`;this.metadataCache.set(c,s);try{switch(e){case"holding":await l.holdings.update(a,{metadata:s});break;case"location":await l.locations.update(a,{metadata:s});break;case"token":await l.tokens.update(a,{metadata:s});break}console.log("[DEBUG] updateCacheForItem - persisted metadata for:",e,a)}catch(t){console.warn("[DEBUG] updateCacheForItem - failed to persist metadata:",t)}this.cacheExpiry=null}async markAllAsSynced(){const e=new Date;console.log("[DEBUG] markAllAsSynced - starting at:",e.toISOString()),this.setGlobalSyncTime(e);const a={isNew:!1,isModified:!1,isDeleted:!1,isSynced:!0,lastModified:e,lastSyncTime:e,version:1},s=await l.holdings.toArray();for(const i of s){await l.holdings.update(i.id,{metadata:a});const o=`holding_${i.id}`;this.metadataCache.set(o,a)}const c=await l.locations.toArray();for(const i of c){await l.locations.update(i.id,{metadata:a});const o=`location_${i.id}`;this.metadataCache.set(o,a)}const t=await l.tokens.toArray();for(const i of t){await l.tokens.update(i.symbol,{metadata:a});const o=`token_${i.symbol}`;this.metadataCache.set(o,a)}this.cacheExpiry=null,console.log("[DEBUG] markAllAsSynced - completed and persisted to database. Holdings:",s.length,"Locations:",c.length,"Tokens:",t.length)}async forceResetAllMetadata(){console.log("[DEBUG] forceResetAllMetadata - clearing all metadata and repopulating initial data"),this.clearCache();const e=[];for(let t=0;t<localStorage.length;t++){const i=localStorage.key(t);i&&(i.startsWith("unsynced_")||i.startsWith("metadata_")||i.includes("syncData")||i.includes("conflictData")||i.includes("unsyncedCount")||i.includes("syncStatus")||i.includes("globalSyncTime")||i==="legacyDataResetCompleted")&&e.push(i)}e.forEach(t=>localStorage.removeItem(t)),await l.locations.clear(),await l.tokens.clear();const a=()=>{const t=new Date;return{isNew:!1,isModified:!1,isDeleted:!1,isSynced:!0,lastModified:t,lastSyncTime:t,version:1}},s=[{id:"bitflyer",name:"bitFlyer",type:"domestic_cex",isCustom:!1},{id:"coincheck",name:"Coincheck",type:"domestic_cex",isCustom:!1},{id:"bitbank",name:"bitbank",type:"domestic_cex",isCustom:!1},{id:"gmo-coin",name:"GMO Coin",type:"domestic_cex",isCustom:!1},{id:"sbi-vc",name:"SBI VC Trade",type:"domestic_cex",isCustom:!1},{id:"binance",name:"Binance",type:"global_cex",isCustom:!1},{id:"coinbase",name:"Coinbase",type:"global_cex",isCustom:!1},{id:"kraken",name:"Kraken",type:"global_cex",isCustom:!1},{id:"bybit",name:"Bybit",type:"global_cex",isCustom:!1},{id:"okx",name:"OKX",type:"global_cex",isCustom:!1},{id:"metamask",name:"MetaMask",type:"sw_wallet",isCustom:!1},{id:"trust-wallet",name:"Trust Wallet",type:"sw_wallet",isCustom:!1},{id:"phantom",name:"Phantom",type:"sw_wallet",isCustom:!1},{id:"keplr",name:"Keplr",type:"sw_wallet",isCustom:!1},{id:"backpack",name:"Backpack",type:"sw_wallet",isCustom:!1},{id:"ledger",name:"Ledger",type:"hw_wallet",isCustom:!1},{id:"trezor",name:"Trezor",type:"hw_wallet",isCustom:!1}].map(t=>({...t,metadata:a()})),c=[{symbol:"BTC",name:"Bitcoin",id:"bitcoin"},{symbol:"ETH",name:"Ethereum",id:"ethereum"},{symbol:"BNB",name:"BNB",id:"binancecoin"},{symbol:"ADA",name:"Cardano",id:"cardano"},{symbol:"SOL",name:"Solana",id:"solana"},{symbol:"XRP",name:"XRP",id:"ripple"},{symbol:"DOT",name:"Polkadot",id:"polkadot"},{symbol:"DOGE",name:"Dogecoin",id:"dogecoin"},{symbol:"AVAX",name:"Avalanche",id:"avalanche-2"},{symbol:"SHIB",name:"Shiba Inu",id:"shiba-inu"},{symbol:"MATIC",name:"Polygon",id:"matic-network"},{symbol:"LTC",name:"Litecoin",id:"litecoin"},{symbol:"ATOM",name:"Cosmos",id:"cosmos"},{symbol:"LINK",name:"Chainlink",id:"chainlink"},{symbol:"UNI",name:"Uniswap",id:"uniswap"}].map(t=>({...t,metadata:a()}));await l.locations.bulkAdd(s),await l.tokens.bulkAdd(c),this.setGlobalSyncTime(new Date),console.log("[DEBUG] forceResetAllMetadata - completed successfully")}async debugClearAllLegacyData(){console.log("[DEBUG] Manual legacy data cleanup started"),localStorage.removeItem("legacyDataResetCompleted");const e=[];for(let s=0;s<localStorage.length;s++){const c=localStorage.key(s);c&&e.push(c)}const a=e.filter(s=>s.includes("unsynced")||s.includes("metadata")||s.includes("sync")||s.includes("conflict")||s.startsWith("holding_")||s.startsWith("location_")||s.startsWith("token_"));console.log("[DEBUG] Manual cleanup - removing keys:",a),a.forEach(s=>localStorage.removeItem(s)),await this.forceResetAllMetadata(),console.log("[DEBUG] Manual legacy data cleanup completed"),alert("レガシーデータの削除が完了しました。ページを再読み込みしてください。")}}const f=new u;typeof window<"u"&&(window.clearLegacyData=()=>f.debugClearAllLegacyData(),console.log("[DEBUG] window.clearLegacyData() function available for manual legacy data cleanup"));export{f as metadataService};
